name: Build PHP binaries

on:
  workflow_call:
    inputs:
      pm-version-major:
        description: 'PocketMine-MP major version'
        required: true
        type: number
      php-version-base:
        description: 'PHP base version'
        required: true
        type: string

jobs:
  linux:
    name: Linux / PM${{ inputs.pm-version-major }} / PHP ${{ inputs.php-version-base }}
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v4

      - name: Install tools and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install make autoconf automake libtool libtool-bin m4 wget libc-bin gzip bzip2 bison g++ git re2c

      - name: Prepare compile.sh download cache
        id: download-cache
        uses: actions/cache@v4
        with:
          path: ./download_cache
          key: compile-sh-cache-ssl-https-${{ hashFiles('./compile.sh') }}
          restore-keys: compile-sh-cache-ssl-https-

      - name: Compile PHP
        run: |
          # Used "set -ex" instead of hashbang since script isn't executed with hashbang
          set -ex
          trap "exit 1" ERR
          ./compile.sh -t linux64 -j 4 -g -P ${{ inputs.pm-version-major }} -c ./download_cache -D -z ${{ inputs.php-version-base }}

      - name: Create tarball
        run: |
          tar -czf ./PHP-${{ inputs.php-version-base }}-Linux-x86_64-PM${{ inputs.pm-version-major }}.tar.gz bin
          tar -czf ./PHP-${{ inputs.php-version-base }}-Linux-x86_64-PM${{ inputs.pm-version-major }}-debugging-symbols.tar.gz bin-debug

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: PHP-${{ inputs.php-version-base }}-Linux-PM${{ inputs.pm-version-major }}
          path: |
            ./PHP-${{ inputs.php-version-base }}-Linux-x86_64-PM${{ inputs.pm-version-major }}*.tar.gz
            install.log
            compile.sh
          if-no-files-found: error

      - name: Prepare workspace for upload
        if: failure()
        run: tar -czf workspace.tar.gz install_data

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: PHP-${{ inputs.php-version-base }}-Linux-workspace-PM${{ inputs.pm-version-major }}
          path: |
            workspace.tar.gz
          if-no-files-found: error

  macos:
    name: MacOS ${{ matrix.artifact-name }} / PM${{ inputs.pm-version-major }} / PHP ${{ inputs.php-version-base }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        include:
          - target-name: mac-x86-64
            artifact-name: x86_64
            image: macos-12
          - target-name: mac-arm64
            artifact-name: arm64
            image: macos-14

    steps:
      - uses: actions/checkout@v4
      
      - name: Install tools and dependencies
        run: |
          #workaround github actions default image providing outdated pkg-config
          brew uninstall --ignore-dependencies --force pkg-config@0.29.2 || true
          brew install libtool autoconf automake pkg-config bison re2c

      - name: Prepare compile.sh download cache
        id: download-cache
        uses: actions/cache@v4
        with:
          path: ./download_cache
          key: compile-sh-cache-ssl-https-${{ hashFiles('./compile.sh') }}
          restore-keys: compile-sh-cache-ssl-https-

      - name: Compile PHP
        run: |
          export PATH="/usr/local/opt/bison/bin:$PATH"
          set -ex
          trap "exit 1" ERR
          ./compile.sh -t ${{ matrix.target-name }} -j4 -g -P ${{ inputs.pm-version-major }} -c ./download_cache -D -z ${{ inputs.php-version-base }}
          
      - name: Create tarball
        run: |
          tar -czf ./PHP-${{ inputs.php-version-base }}-MacOS-${{ matrix.artifact-name }}-PM${{ inputs.pm-version-major }}.tar.gz bin
          tar -czf ./PHP-${{ inputs.php-version-base }}-MacOS-${{ matrix.artifact-name }}-PM${{ inputs.pm-version-major }}-debugging-symbols.tar.gz bin-debug
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: PHP-${{ inputs.php-version-base }}-MacOS-${{ matrix.artifact-name }}-PM${{ inputs.pm-version-major }}
          path: |
            ./PHP-${{ inputs.php-version-base }}-MacOS-${{ matrix.artifact-name}}-PM${{ inputs.pm-version-major }}*.tar.gz
            install.log
            compile.sh
          if-no-files-found: error

      - name: Prepare workspace for upload
        if: failure()
        run: tar -czf workspace.tar.gz install_data

      - name: Upload workspace
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: PHP-${{ inputs.php-version-base }}-MacOS-${{ matrix.artifact-name }}-workspace-PM${{ inputs.pm-version-major }}
          path: |
            workspace.tar.gz
          if-no-files-found: error

  windows:
    name: Windows / PM${{ inputs.pm-version-major }} / PHP ${{ inputs.php-version-base }}
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v4

      - name: Prepare download cache
        id: download-cache
        uses: actions/cache@v4
        with:
          path: ./download_cache
          key: windows-cache-${{ hashFiles('./windows-compile-vs.ps1') }}
          restore-keys: windows-cache-

      - name: Compile PHP
        run: .\windows-compile-vs.ps1
        env:
          SOURCES_PATH: ${{ github.workspace }}\pocketmine-php-sdk
          PM_VERSION_MAJOR: ${{ inputs.pm-version-major }}
          PHP_VERSION_BASE: ${{ inputs.php-version-base }}

      - name: Download VC++ Redistributable
        run: |
          #vs17 allows running anything from VS 2015-2022
          Invoke-WebRequest -Uri https://aka.ms/vs/17/release/vc_redist.x64.exe -OutFile vc_redist.x64.exe

      - name: Prepare artifacts
        run: |
          mkdir temp
          Compress-Archive -Path .\bin -DestinationPath "PHP-${{ inputs.php-version-base }}-Windows-x64-PM${{ inputs.pm-version-major }}.zip"
          move php-debug-pack-*.zip temp/PHP-${{ inputs.php-version-base }}-Windows-x64-PM${{ inputs.pm-version-major }}-debugging-symbols.zip
          move temp\*.zip .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: PHP-${{ inputs.php-version-base }}-Windows-PM${{ inputs.pm-version-major }}
          path: |
            PHP-${{ inputs.php-version-base }}-Windows-x64-PM${{ inputs.pm-version-major }}*.zip
            compile.log
            windows-compile-vs.bat
            vc_redist.x64.exe
          if-no-files-found: error


  publish:
    name: Publish binaries / PM${{ inputs.pm-version-major }} / PHP ${{ inputs.php-version-base }}
    needs: [linux, macos, windows]
    runs-on: ubuntu-20.04
    if: ${{ github.ref_name == 'stable' && github.ref_type == 'branch' && !contains(github.event.head_commit.message, '[no release]') }}
    concurrency: release-${{ inputs.php-version-base }}

    steps:
      - uses: actions/checkout@v4

      - name: Update latest tag target
        run: |
          git tag -f php-${{ inputs.php-version-base }}-latest
          git push -f origin php-${{ inputs.php-version-base }}-latest
          git tag -f pm${{ inputs.pm-version-major }}-latest
          git push -f origin pm${{ inputs.pm-version-major }}-latest

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}

      - name: Generate release notes
        run: |
          echo "Last updated on **$(date -u +'%d %b %Y at %H:%M:%S %Z')**" > changelog.md
          echo -e "\n\n" >> changelog.md
          echo "Built by: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> changelog.md
          echo "Build number: ${{ github.run_number }}" >> changelog.md
          if [[ "${{ github.ref_name }}" != "${{ github.event.repository.default_branch }}" ]]; then
            echo -e "\n\n\n" >> changelog.md
            if [[ "${{ github.ref_name }}" == *"preview" ]]; then
              echo "# :warning: :radioactive: EXPERIMENTAL!!! :radioactive: :warning:" >> changelog.md
              echo "### Your server and/or plugins may crash or misbehave with this release!" >> changelog.md
              echo "### Consider downloading the [recommended release](${{ github.server_url }}/${{ github.repository }}/releases/latest) instead." >> changelog.md
            else
              echo ":warning: WARNING! :warning:" >> changelog.md
              echo "Some plugins might not work properly on this version yet." >> changelog.md
              echo "If you have problems, try the [recommended release](${{ github.server_url }}/${{ github.repository }}/releases/latest) instead." >> changelog.md
            fi
          else
            echo ":white_check_mark: This version is recommended for production servers." >> changelog.md
          fi
          echo -e "\n\n\n" >> changelog.md
          echo ":information_source: **Linux/MacOS users**: Please see [this page](https://doc.pmmp.io/en/rtfd/faq/installation/opcache.so.html) to fix extension loading errors. Also, check out the [PocketMine-MP Linux/MacOS installer](https://doc.pmmp.io/en/rtfd/installation/get-dot-pmmp-dot-io.html)." >> changelog.md

      - name: Get date
        id: date
        run: |
          echo DATE=$(date -u +'%d %b %Y') >> $GITHUB_OUTPUT

      - name: Update latest PHP release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: |
            ${{ github.workspace }}/PHP-${{ inputs.php-version-base }}-Linux-PM*/*.tar.gz
            ${{ github.workspace }}/PHP-${{ inputs.php-version-base }}-MacOS-*-PM*/*.tar.gz
            ${{ github.workspace }}/PHP-${{ inputs.php-version-base }}-Windows-PM*/*.zip
            ${{ github.workspace }}/PHP-${{ inputs.php-version-base }}-Windows-PM*/*.exe
          name: PHP ${{ inputs.php-version-base }} - Latest (${{ steps.date.outputs.DATE }})
          tag: php-${{ inputs.php-version-base }}-latest
          commit: ${{ github.sha }}
          allowUpdates: true
          bodyFile: ${{ github.workspace }}/changelog.md
          removeArtifacts: true

      - name: Update latest PM release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: |
            ${{ github.workspace }}/PHP-*-Linux-PM${{ inputs.pm-version-major }}/*.tar.gz
            ${{ github.workspace }}/PHP-*-MacOS-*-PM${{ inputs.pm-version-major }}/*.tar.gz
            ${{ github.workspace }}/PHP-*-Windows-PM${{ inputs.pm-version-major }}/*.zip
            ${{ github.workspace }}/PHP-*-Windows-PM${{ inputs.pm-version-major }}/*.exe
          name: PocketMine-MP ${{ inputs.pm-version-major }}.x - Latest (${{ steps.date.outputs.DATE }})
          tag: pm${{ inputs.pm-version-major }}-latest
          commit: ${{ github.sha }}
          allowUpdates: true
          bodyFile: ${{ github.workspace }}/changelog.md
          removeArtifacts: true

      - name: Publish unique release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: |
            ${{ github.workspace }}/PHP-*-Linux-PM*/*.tar.gz
            ${{ github.workspace }}/PHP-*-MacOS-*-PM*/*.tar.gz
            ${{ github.workspace }}/PHP-*-Windows-PM*/*.zip
            ${{ github.workspace }}/PHP-*-Windows-PM*/*.exe
          makeLatest: false
          name: PHP ${{ inputs.php-version-base }} (Build ${{ github.run_number }})
          tag: php-build-${{ github.run_number }}
          commit: ${{ github.sha }}
          bodyFile: ${{ github.workspace }}/changelog.md
